											{/* {getFieldInfo('tags')?.isEnabled && (
												<Select
													label="Tags:"
													data={[
														{ field: 'Não informado', value: 'Não informado' },
													]}
													control={hookFormControlCreate}
													setValue={hookFormSetValueCreate}
													error={hookFormErrosCreate.tags?.message}
													{...hookFormRegisterCreate('tags')}
												/>
											)} */}

                      	{/* START OF TABLE */}
					{/* <div className="w-full !overflow-x-auto rounded-md border">
							<Table className="w-full bg-white">
								<TableHeader>
									{table.getHeaderGroups().map((headerGroup) => (
										<TableRow key={headerGroup.id}>
											{headerGroup.headers.map((header, idx) => (
												<TableHead
													key={header.id}
													className={cn(
														'py-3',
														idx === 0 ? 'pl-4 pr-4' : '',
														header.column.id === 'actions' && 'w-16',
													)}
												>
													{header.isPlaceholder
														? null
														: flexRender(
																header.column.columnDef.header,
																header.getContext(),
															)}
												</TableHead>
											))}
										</TableRow>
									))}
								</TableHeader>

								<TableBody>
									{table.getRowModel().rows.length > 0 ? (
										table.getRowModel().rows.map((row) => (
											<TableRow
												key={row.id}
												data-state={
													row.getIsSelected() ? 'selected' : undefined
												}
												// onDoubleClick={() => handleRowDoubleClick(row.original)}
											>
												{row.getVisibleCells().map((cell, idx) => (
													<TableCell
														key={cell.id}
														className={cn('py-3', idx === 0 ? 'pl-8 pr-4' : '')}
													>
														{cell.column.id === 'bankName' ? (
															<span>
																{mapBankName(
																	cell.getContext().getValue() as string,
																)}
															</span>
														) : (
															flexRender(
																cell.column.columnDef.cell,
																cell.getContext(),
															)
														)}
													</TableCell>
												))}
											</TableRow>
										))
									) : (
										<TableRow>
											<TableCell
												colSpan={columns.length}
												className="h-24 text-center"
											>
												Nenhum resultado encontrado.
											</TableCell>
										</TableRow>
									)}
								</TableBody>
							</Table>
						</div> */}
					{/* {!isLoading && result && (
							<Pagination
								pageIndex={result.meta.pageIndex}
								pageSize={result.meta.perPage}
								totalCount={result.meta.totalCount}
								onPageChange={handlePaginate}
							/>
						)} */}